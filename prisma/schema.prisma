// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @unique @default(cuid())
  name             String
  surname          String
  email            String         @unique
  username         String         @unique
  password         String
  resettedPassword Boolean        @default(false)
  phone            String
  role             String         @default("Admin")
  comune           String?
  province         String?
  mansione         String
  isApproved       Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime?      @updatedAt
  Structures       Structure[]
  WaitingList      WaitingList[]
  Notification     Notification[]
}

model Structure {
  id                 String    @id @unique @default(cuid())
  name               String
  enteGestore        String
  type               String[]
  accredittedInRome  Boolean   @default(false)
  emergencyReception Boolean   @default(false)
  availableToWelcome Boolean   @default(false)
  otherServices      String?
  address            String
  city               String
  comune             String
  province           String
  municipio          String
  zipCode            String
  latitude           Float
  longitude          Float
  adminName          String
  adminSurname       String
  website            String?
  servicesCardLink   String?
  otherInfo          String?
  isActive           Boolean   @default(true)
  user               User      @relation(fields: [userId], references: [id])
  userId             String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
  Families           Family[]
}

model Family {
  id                 String    @id @unique @default(cuid())
  name               String
  seats              Int
  amministrationName String
  type               String
  startedDate        DateTime  @default(now())
  endDate            DateTime?
  citizenship        String
  minorsNumber       Int
  adultsNumber       Int
  minors             Json[]
  insertionProcedure String
  origin             String
  notes              String?
  isActive           Boolean   @default(true)
  structure          Structure @relation(fields: [structureId], references: [id])
  structureId        String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
}

model WaitingList {
  id                          String    @id @unique @default(uuid())
  name                        String
  surname                     String
  email                       String    @unique
  phone                       String
  structureTypes              String[]
  structureAccredittedInRome  Boolean
  structureEmergencyReception Boolean
  structureAvailableToWelcome Boolean   @default(true)
  structureAddress            String
  structureCity               String
  structureProvince           String
  structureComune             String
  structureMunicipio          String
  isActive                    Boolean   @default(true)
  user                        User      @relation(fields: [userId], references: [id])
  userId                      String
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime? @updatedAt
}

model Notification {
  id        String    @id @unique @default(cuid())
  title     String
  content   String
  read      Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
